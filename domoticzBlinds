
/**
 *  domoticzBlinds
 *
 *  Copyright 2019 Martin Verbeek
 *
 *	4.0 2018-02-12 Add windowShade capability, fix eodDone
 *	4.1	2018-04-05 Introduce configure for all non standard attributes and commands
 *	4.2	2018-06-02 Moved EOD processing to SM
 *	4.3	2018-06-21 Removed calibrate, moved it to timed session capability
 * 	4.4 2019-03-16 presetPosition gone as a command for windowshades???? named it in commands
 * 	4.5 2019-03-30 added window shade preset capability
 */

preferences {
    input(name:"stopSupported", type:"bool", title: "Stop command supported?", description:"Does your blind use the STOP command to halt the blind. NOT to be confused with the Somfy Stop/My command!", defaultValue:false)
}   
metadata {
	definition (name: "domoticzBlinds", namespace: "verbem", author: "Martin Verbeek", vid: "generic-shade") {
    
        capability "Sensor"
        capability "Refresh"
        capability "Window Shade"
    }
    
        command "open"
		command "close"
 
}

// handle commands, 
def configure(command) {
	if (command?.setState) state."${command.setState.name}" = command.setState.value
    if (command?.getState) parent.state."${command.getState.name}" = state?."${command.getState.name}"
}

def on() { open() }

def off() { close() }

def close() {
	log.debug "close()"
    if (parent) {
		sendEvent(name:'windowShade', value:"closed" as String)
        parent.domoticz_off(getIDXAddress())
    }
}

def refresh() {
	log.debug "refresh()"

    if (parent) {
        parent.domoticz_poll(getIDXAddress())
    }
    
}

def open() {
	log.debug "open()"
    if (parent) {
		sendEvent(name:'windowShade', value:"open" as String)
        parent.domoticz_on(getIDXAddress())
    }
}

def setPosition(pos) 
{
	if (pos != 100)
	{
       log.debug "closed by setPosition"
	   sendEvent(name:'windowShade', value:"closed" as String)
       parent.domoticz_off(getIDXAddress())
	}
	else
	{
       sendEvent(name:'windowShade', value:"open" as String)
	   parent.domoticz_on(getIDXAddress())
	}
}
// Dashboard uses setLevel as if shades are 'dimmers'
def setLevel(pos) { setPosition(pos) }

// gets the IDX address of the device
private getIDXAddress() {
	
    def idx = getDataValue("idx")
        
    if (!idx) {
        def parts = device.deviceNetworkId.split(":")
        if (parts.length == 3) {
            idx = parts[2]
        } else {
            log.warn "Can't figure out idx for device: ${device.id}"
        }
    }

    //log.debug "Using IDX: $idx for device: ${device.id}"
    return idx
}

/*----------------------------------------------------*/
/*			execute event can be called from the service manager!!!
/*----------------------------------------------------*/
private def childEvent(Map message) {
    def children = getChildDevices()
    def childSmart
    def icon
   
	if (message?.value == null) return   
    if (children) {
 		children.each {
        	childSmart = it
        }
    }
    else {
    	log.error "no children cannot issue sendEvent"
        return
    }
    
    if (message.name == "cloudCover") {      
        switch (message.value.toInteger()) {
            case 0..20:
            icon = "http://icons.wxug.com/i/c/k/clear.gif"
            break
            case 21..50:
            icon = "http://icons.wxug.com/i/c/k/partlycloudy.gif"
            break
            case 51..80:
            icon = "http://icons.wxug.com/i/c/k/mostlycloudy.gif"
            break
            default:
                icon = "http://icons.wxug.com/i/c/k/cloudy.gif"
            break
        } 
    }
    
    if(message.name.matches("windBearing|sunBearing")) {
        icon = "https://raw.githubusercontent.com/verbem/SmartThingsPublic/master/devicetypes/verbem/domoticzblinds.src/WindDir${message.value}.PNG"
    }    
    
    if (icon) childSmart.sendEvent(name:"${message.name}", value:"${message.value}", data:[icon:icon])
    else childSmart.sendEvent(name:"${message.name}", value:"${message.value}")
}

def installed() {
	initialize()
}

def updated() {
	initialize()
}

def initialize() {

	if (parent) {
        sendEvent(name: "DeviceWatch-Enroll", value: groovy.json.JsonOutput.toJson([protocol: "LAN", scheme:"untracked"]), displayed: false)
        //createComponent()
    }
    else {
    	log.error "You cannot use this DTH without the related SmartAPP Domoticz Server, the device needs to be a child of this App"
        sendEvent(name: "switch", value: "Error", descriptionText: "$device.displayName You cannot use this DTH without the related SmartAPP Domoticz Server", isStateChange: true)
    }
}
